// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopEase.Data;

#nullable disable

namespace ShopEase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210210203_IntergratePassword")]
    partial class IntergratePassword
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopEase.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdminSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("ShopEase.Models.Aisle", b =>
                {
                    b.Property<int>("AisleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AisleID"));

                    b.Property<string>("AisleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AisleID");

                    b.ToTable("Aisle");
                });

            modelBuilder.Entity("ShopEase.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ShopEase.Models.CustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AisleID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AisleID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("CustomerRequest");
                });

            modelBuilder.Entity("ShopEase.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("RequestID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("ShopEase.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "de36d7f7-38dd-4af1-8d88-5ec795678a8a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3xWzF/C9QdU6dGr//ZlT++albdGLEDm3D7Yr07o6JzlYM+8Xq0t7Mn2nXJupWcyQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Floor Assistant",
                            Surname = "Doe",
                            TwoFactorEnabled = false,
                            UserName = "john.doe"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Unavailable",
                            ConcurrencyStamp = "db40d7f5-f256-4697-bf27-449c7afe5f34",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Sikholwe",
                            PasswordHash = "AQAAAAIAAYagAAAAEAuXRFkWPK+S8Qf6x7UHwQ87dfb9002aG0B18NUv7ZuYQEWwZCmMor/UHcUZzqx5Cw==",
                            PhoneNumberConfirmed = false,
                            Role = "Floor Assistant",
                            Surname = "Mdekazi",
                            TwoFactorEnabled = false,
                            UserName = "sikholwe.mdekazi"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "025e27b5-ba92-48d6-a192-5b9d8291754b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Michael",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEZFflA7pFOywVs/6gXMDt8uZh4CZtn0Mpf5cr6iu/KbyVwUyfQ6JUl2InLY0mqkg==",
                            PhoneNumberConfirmed = false,
                            Role = "Store Manager",
                            Surname = "Brown",
                            TwoFactorEnabled = false,
                            UserName = "michael.brown"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "472842cc-b3da-47fa-8b79-c09903aa087b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emily",
                            PasswordHash = "AQAAAAIAAYagAAAAEKX7Tjc3zWxQ9n9ZhpJ0kp+DMoVOeJcXMPksxF3eEEiZtLQdFgfpOwg9ppzOMUhy9w==",
                            PhoneNumberConfirmed = false,
                            Role = "Cashier",
                            Surname = "Davis",
                            TwoFactorEnabled = false,
                            UserName = "emily.davis"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Busy",
                            ConcurrencyStamp = "74a044ae-231b-4469-ad15-6c34034aef66",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "David",
                            PasswordHash = "AQAAAAIAAYagAAAAEBmCSbQpFByYoARwIRr8Up69XMe3XVi6Qeqg9S6b3vakVmAAOTVynrVa5dWXb2P7vg==",
                            PhoneNumberConfirmed = false,
                            Role = "Stock Associate",
                            Surname = "Wilson",
                            TwoFactorEnabled = false,
                            UserName = "david.wilson"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "b8e3360c-ee8f-4703-a884-4c47bdf95637",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Sophia",
                            PasswordHash = "AQAAAAIAAYagAAAAENANqDa0w9BkqbPRbEGGcs+E/t8lzyNbze7wN696FjNsWaBteyJdWauIqIkcf4+R1w==",
                            PhoneNumberConfirmed = false,
                            Role = "Floor Assistant",
                            Surname = "Martinez",
                            TwoFactorEnabled = false,
                            UserName = "sophia.martinez"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "3edb4466-b67d-46c2-8ced-479d75072c94",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "James",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPqNJNHF5LCbQk//2+RnbPOCZIXjr6LCnBbtOtha3SL9O3dxYSXwmtree8pmhhVZg==",
                            PhoneNumberConfirmed = false,
                            Role = "Security",
                            Surname = "Anderson",
                            TwoFactorEnabled = false,
                            UserName = "james.anderson"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Busy",
                            ConcurrencyStamp = "40aac5bc-7dbb-4178-9aa3-c1253092f58c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Olivia",
                            PasswordHash = "AQAAAAIAAYagAAAAEF77Ndij29N+BzEczSn25G5mK87odJw5JsSXRHcDwnIlYjq913xw1+A96wm45chzjw==",
                            PhoneNumberConfirmed = false,
                            Role = "Floor Assistant",
                            Surname = "Taylor",
                            TwoFactorEnabled = false,
                            UserName = "olivia.taylor"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "8f6a53d9-45ef-4437-b080-fd9d568f1d6f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Robert",
                            PasswordHash = "AQAAAAIAAYagAAAAEAB7amPMsjmkyRQULjlkQbIy5lXTk1/3DQB/yNqHWC/D4YNWxBUZ+nAl2suNsfBVgQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Floor Assistant",
                            Surname = "Thomas",
                            TwoFactorEnabled = false,
                            UserName = "robert.thomas"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            AvailabilityStatus = "Available",
                            ConcurrencyStamp = "9924bee6-6f9a-4c35-a61b-d2d1b1c11eab",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Emma",
                            PasswordHash = "AQAAAAIAAYagAAAAEB5ICy+RLcVvx2OhggQ16mqmKyNW7DqIY99HI5P21uEJfzoxQKUO+/cAKXLbbgDmiw==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer Service",
                            Surname = "Harris",
                            TwoFactorEnabled = false,
                            UserName = "emma.harris"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ShopEase.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ShopEase.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopEase.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ShopEase.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopEase.Models.CustomerRequest", b =>
                {
                    b.HasOne("ShopEase.Models.Aisle", "Aisle")
                        .WithMany()
                        .HasForeignKey("AisleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopEase.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopEase.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.Navigation("Aisle");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ShopEase.Models.Feedback", b =>
                {
                    b.HasOne("ShopEase.Models.CustomerRequest", "CustomerRequest")
                        .WithMany()
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
